version: '3'
services:
  db:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: phalanx-development
      MYSQL_USER:  root
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - "db-data:/var/lib/mysql"
    networks:
      - default
    deploy:
      placement:
        constraints: [node.role == manager]

  redis:
    image: redis:3.2-alpine
    networks:
      - default
    deploy:
      placement:
        constraints: [node.role == manager]
 

  app: &app_base
    build: .
    command: bundler exec rails s -p 3000 -b '0.0.0.0'
    volumes:
      - .:/www/phalanx/app
    environment:
      REDIS_SIDEKIQ_URL: redis://redis:6379/0
      REDIS_CABLE_URL: redis://redis:6379/1
      DB_HOST: db
      DB_USER:  root
      DB_NAME: phalanx-development
      DB_PASSWORD: password
    ports:
      - "3001:3000"
    depends_on:
            - db
            - redis
    links:
            - redis
            - db

    networks:
      - default

    # service deployment
    deploy:
      mode: replicated
      replicas: 2
      labels: [APP=PHALANX]
      # service resource management
      resources:
        # Hard limit - Docker does not allow to allocate more
        limits:
          cpus: '0.25'
          memory: 512M
        # Soft limit - Docker makes best effort to return to it
        reservations:
          cpus: '0.25'
          memory: 256M
      # service restart policy
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      # service update configuration
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        max_failure_ratio: 0.3
      # placement constraint - in this case on 'worker' nodes only
      placement:
        constraints: [node.role == worker]


    #deploy:
    #  mode: replicated
    #  replicas: 2
    #  labels: [APP=PHALANX]
    #  placement:
    #    constraints: [node.role == worker

  dockerui:
    image: portainer/portainer
    restart: always
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    expose:
      - 9000
    ports:
      - 80:9000
    networks:
      - default
    deploy:
      placement:
        constraints: [node.role == manager]

  worker:
    <<: *app_base
    command: bundler exec sidekiq
    ports: []
    networks:
      default:
        aliases:
          - workers
    depends_on:
      - app

networks:
    default:

volumes:
  db-data:
